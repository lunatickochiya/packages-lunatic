diff -urN a/package.json b/package.json
--- a/package.json	1985-10-26 17:15:00.000000000 +0900
+++ b/package.json	2019-05-27 10:52:14.401301912 +0900
@@ -23,16 +23,16 @@
   },
   "main": "./lib/ffi",
   "dependencies": {
-    "bindings": "~1.2.0",
-    "debug": "2",
-    "ref": "1",
-    "ref-struct": "1",
-    "nan": "2"
+    "bindings": "~1.5.0",
+    "debug": "4",
+    "ref": "lxe/ref#node-12",
+    "ref-struct": "lxe/ref-struct#node-12",
+    "nan": "^2.13.2"
   },
   "devDependencies": {
-    "fs-extra": "^0.23.1",
+    "fs-extra": "^7.0.1",
     "mocha": "*",
-    "ref-array": "1"
+    "ref-array": "lxe/ref-array#node-12"
   },
   "scripts": {
     "test": "node-gyp rebuild --directory test && mocha -gc --reporter spec"
diff -urN a/src/callback_info.cc b/src/callback_info.cc
--- a/src/callback_info.cc	1985-10-26 17:15:00.000000000 +0900
+++ b/src/callback_info.cc	2019-05-27 10:49:58.945633917 +0900
@@ -109,9 +109,10 @@
 
   // Args: cif pointer, JS function
   // TODO: Check args
-  ffi_cif *cif = (ffi_cif *)Buffer::Data(info[0]->ToObject());
-  size_t resultSize = info[1]->Int32Value();
-  int argc = info[2]->Int32Value();
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+  ffi_cif *cif = (ffi_cif *)Buffer::Data(info[0]->ToObject(context).ToLocalChecked());
+  size_t resultSize = info[1]->Int32Value(context).ToChecked();
+  int argc = info[2]->Int32Value(context).ToChecked();
   Local<Function> errorReportCallback = Local<Function>::Cast(info[3]);
   Local<Function> callback = Local<Function>::Cast(info[4]);
 
@@ -205,11 +206,13 @@
  * Init stuff.
  */
 
-void CallbackInfo::Initialize(Handle<Object> target) {
+void CallbackInfo::Initialize(v8::Local<Object> target) {
   Nan::HandleScope scope;
 
-	Nan::Set(target, Nan::New<String>("Callback").ToLocalChecked(),
-		Nan::New<FunctionTemplate>(Callback)->GetFunction());
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+	Nan::Set(target,
+    Nan::New<String>("Callback").ToLocalChecked(),
+		Nan::New<FunctionTemplate>(Callback)->GetFunction(context).ToLocalChecked());
 
   // initialize our threaded invokation stuff
 #ifdef WIN32
diff -urN a/src/ffi.cc b/src/ffi.cc
--- a/src/ffi.cc	1985-10-26 17:15:00.000000000 +0900
+++ b/src/ffi.cc	2019-05-27 10:49:58.945633917 +0900
@@ -44,15 +44,17 @@
   Nan::Set(target, Nan::New<String>("version").ToLocalChecked(),
     Nan::New<String>(PACKAGE_VERSION).ToLocalChecked());
 
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+
   // main function exports
   Nan::Set(target, Nan::New<String>("ffi_prep_cif").ToLocalChecked(),
-    Nan::New<FunctionTemplate>(FFIPrepCif)->GetFunction());
+    Nan::New<FunctionTemplate>(FFIPrepCif)->GetFunction(context).ToLocalChecked());
   Nan::Set(target, Nan::New<String>("ffi_prep_cif_var").ToLocalChecked(),
-    Nan::New<FunctionTemplate>(FFIPrepCifVar)->GetFunction());
+    Nan::New<FunctionTemplate>(FFIPrepCifVar)->GetFunction(context).ToLocalChecked());
   Nan::Set(target, Nan::New<String>("ffi_call").ToLocalChecked(),
-    Nan::New<FunctionTemplate>(FFICall)->GetFunction());
+    Nan::New<FunctionTemplate>(FFICall)->GetFunction(context).ToLocalChecked());
   Nan::Set(target, Nan::New<String>("ffi_call_async").ToLocalChecked(),
-    Nan::New<FunctionTemplate>(FFICallAsync)->GetFunction());
+    Nan::New<FunctionTemplate>(FFICallAsync)->GetFunction(context).ToLocalChecked());
 
   // `ffi_status` enum values
   SET_ENUM_VALUE(FFI_OK);
@@ -161,8 +163,8 @@
   ftmap->Set(Nan::New<String>("float").ToLocalChecked(), WrapPointer((char *)&ffi_type_float));
   ftmap->Set(Nan::New<String>("double").ToLocalChecked(), WrapPointer((char *)&ffi_type_double));
   ftmap->Set(Nan::New<String>("pointer").ToLocalChecked(), WrapPointer((char *)&ffi_type_pointer));
-  // NOTE: "long" and "ulong" get handled in JS-land
-  // Let libffi handle "long long"
+  // NOTE: "long" and "ulong" get Locald in JS-land
+  // Let libffi Local "long long"
   ftmap->Set(Nan::New<String>("ulonglong").ToLocalChecked(), WrapPointer((char *)&ffi_type_ulong));
   ftmap->Set(Nan::New<String>("longlong").ToLocalChecked(), WrapPointer((char *)&ffi_type_slong));
 
@@ -192,16 +194,17 @@
     return THROW_ERROR_EXCEPTION("ffi_prep_cif() requires 5 arguments!");
   }
 
-  Handle<Value> cif_buf = info[0];
+  Local<Value> cif_buf = info[0];
   if (!Buffer::HasInstance(cif_buf)) {
     return THROW_ERROR_EXCEPTION("prepCif(): Buffer required as first arg");
   }
 
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
   cif = Buffer::Data(cif_buf.As<Object>());
-  nargs = info[1]->Uint32Value();
-  rtype = Buffer::Data(info[2]->ToObject());
-  atypes = Buffer::Data(info[3]->ToObject());
-  abi = (ffi_abi)info[4]->Uint32Value();
+  nargs = info[1]->Uint32Value(context).ToChecked();
+  rtype = Buffer::Data(info[2]->ToObject(context).ToLocalChecked());
+  atypes = Buffer::Data(info[3]->ToObject(context).ToLocalChecked());
+  abi = (ffi_abi)info[4]->Uint32Value(context).ToChecked();
 
   status = ffi_prep_cif(
       (ffi_cif *)cif,
@@ -236,17 +239,19 @@
     return THROW_ERROR_EXCEPTION("ffi_prep_cif() requires 5 arguments!");
   }
 
-  Handle<Value> cif_buf = info[0];
+  Local<Value> cif_buf = info[0];
   if (!Buffer::HasInstance(cif_buf)) {
     return THROW_ERROR_EXCEPTION("prepCifVar(): Buffer required as first arg");
   }
 
   cif = Buffer::Data(cif_buf.As<Object>());
-  fargs = info[1]->Uint32Value();
-  targs = info[2]->Uint32Value();
-  rtype = Buffer::Data(info[3]->ToObject());
-  atypes = Buffer::Data(info[4]->ToObject());
-  abi = (ffi_abi)info[5]->Uint32Value();
+
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+  fargs = info[1]->Uint32Value(context).ToChecked();
+  targs = info[2]->Uint32Value(context).ToChecked();
+  rtype = Buffer::Data(info[3]->ToObject(context).ToLocalChecked());
+  atypes = Buffer::Data(info[4]->ToObject(context).ToLocalChecked());
+  abi = (ffi_abi)info[5]->Uint32Value(context).ToChecked();
 
   status = ffi_prep_cif_var(
       (ffi_cif *)cif,
@@ -273,10 +278,11 @@
     return THROW_ERROR_EXCEPTION("ffi_call() requires 4 arguments!");
   }
 
-  char *cif = Buffer::Data(info[0]->ToObject());
-  char *fn = Buffer::Data(info[1]->ToObject());
-  char *res = Buffer::Data(info[2]->ToObject());
-  char *fnargs = Buffer::Data(info[3]->ToObject());
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+  char *cif = Buffer::Data(info[0]->ToObject(context).ToLocalChecked());
+  char *fn = Buffer::Data(info[1]->ToObject(context).ToLocalChecked());
+  char *res = Buffer::Data(info[2]->ToObject(context).ToLocalChecked());
+  char *fnargs = Buffer::Data(info[3]->ToObject(context).ToLocalChecked());
 
 #if __OBJC__ || __OBJC2__
     @try {
@@ -315,10 +321,11 @@
   p->result = FFI_OK;
 
   // store a persistent references to all the Buffers and the callback function
-  p->cif = Buffer::Data(info[0]->ToObject());
-  p->fn = Buffer::Data(info[1]->ToObject());
-  p->res = Buffer::Data(info[2]->ToObject());
-  p->argv = Buffer::Data(info[3]->ToObject());
+  auto context = v8::Isolate::GetCurrent()->GetCurrentContext();
+  p->cif = Buffer::Data(info[0]->ToObject(context).ToLocalChecked());
+  p->fn = Buffer::Data(info[1]->ToObject(context).ToLocalChecked());
+  p->res = Buffer::Data(info[2]->ToObject(context).ToLocalChecked());
+  p->argv = Buffer::Data(info[3]->ToObject(context).ToLocalChecked());
 
   Local<Function> callback = Local<Function>::Cast(info[4]);
   p->callback = new Nan::Callback(callback);
@@ -377,7 +384,7 @@
   // invoke the registered callback function
   p->callback->Call(1, argv);
 
-  // dispose of our persistent handle to the callback function
+  // dispose of our persistent Local to the callback function
   delete p->callback;
 
   // free up our memory (allocated in FFICallAsync)
